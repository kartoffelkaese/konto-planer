generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  passwordHash String
  salaryDay    Int
  accountName  String?       @default("Mein Konto")
  createdAt    DateTime      @default(now())
  categories   Category[]
  merchants    Merchant[]
  notes        Note[]
  transactions Transaction[]

  @@map("users")
}

model Transaction {
  id                  String        @id @default(uuid())
  userId              String
  description         String?
  merchant            String
  merchantId          String?
  amount              Decimal       @db.Decimal(10, 2)
  date                DateTime
  isConfirmed         Boolean       @default(false)
  isRecurring         Boolean       @default(false)
  recurringInterval   String?
  lastConfirmedDate   DateTime?
  version             Int           @default(1)
  parentTransactionId String?
  createdAt           DateTime      @default(now())
  merchantRef         Merchant?     @relation(fields: [merchantId], references: [id])
  parentTransaction   Transaction?  @relation("RecurringInstances", fields: [parentTransactionId], references: [id])
  childTransactions   Transaction[] @relation("RecurringInstances")
  user                User          @relation(fields: [userId], references: [id])

  @@index([merchantId], map: "transactions_merchantId_fkey")
  @@index([parentTransactionId], map: "transactions_parentTransactionId_fkey")
  @@index([userId], map: "transactions_userId_fkey")
  @@map("transactions")
}

model Merchant {
  id           String        @id @default(uuid())
  userId       String
  name         String
  createdAt    DateTime      @default(now())
  categoryId   String?
  category     Category?     @relation(fields: [categoryId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@unique([userId, name])
  @@index([categoryId], map: "merchants_categoryId_fkey")
  @@map("merchants")
}

model Category {
  id        String     @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime   @default(now())
  color     String     @default("#A7C7E7")
  user      User       @relation(fields: [userId], references: [id])
  merchants Merchant[]

  @@unique([userId, name])
  @@map("categories")
}

model Note {
  id         Int              @id @default(autoincrement())
  title      String
  content    String           @db.Text
  isActive   Boolean          @default(true)
  userId     String           @db.Char(36)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  months     NoteMonth[]
  readStatus NoteReadStatus[]
  user       User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("notes")
}

model NoteMonth {
  id     Int  @id @default(autoincrement())
  noteId Int
  month  Int  @db.TinyInt
  note   Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([noteId, month])
  @@index([noteId])
  @@map("note_months")
}

model NoteReadStatus {
  id     Int       @id @default(autoincrement())
  noteId Int
  year   Int
  month  Int       @db.TinyInt
  isRead Boolean   @default(false)
  readAt DateTime?
  note   Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([noteId, year, month])
  @@index([noteId])
  @@map("note_read_status")
}
